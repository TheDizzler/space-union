using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Timers;
using System.Text;
using SpaceUnion.StellarObjects;
using SpaceUnion.Tools;
using SpaceUnion.Weapons;


namespace SpaceUnion.Controllers {

<<<<<<< HEAD
	class GameplayScreen {

		private KeyboardState keyState;
		private MouseState mouseState;
		private SpriteBatch spriteBatch;


		List<Asteroid> asteroids;
		List<Ship> ships;
		List<Tangible> targets;
		List<Planet> planets;

		private Ship playerShip;
		private Game1 game;
		Camera mainCamera;
		GUI gui;

		Random gen;

		private AssetManager Assets;

		static public int worldWidth = 8000;
		static public int worldHeight = 6000;

		private int SCREEN_WIDTH;
		private int SCREEN_HEIGHT;


		public GameplayScreen(Game1 game, SpriteBatch batch, Ship selectedship) {

			this.game = game;
			SCREEN_HEIGHT = game.getScreenHeight();
			SCREEN_WIDTH = game.getScreenWidth();

			spriteBatch = batch;

			gen = new Random();
			Assets = Game1.Assets;

			playerShip = selectedship;
			playerShip.Position = new Vector2(200, 200);
			planets = new List<Planet>();
			planets.Add(new Planet(Assets.waterPlanet, new Vector2(4000, 3000), 1000f, 1000));
			planets.Add(new Planet(Assets.moon, new Vector2(1000, 1000), 500f, 800));


			gui = new GUI(game, playerShip, planets[0]);

			Viewport mainViewport = new Viewport((int) playerShip.getX(), (int) playerShip.getY(),
				game.GraphicsDevice.Viewport.Width, game.GraphicsDevice.Viewport.Height - GUI.guiHeight);
			mainCamera = new Camera(mainViewport, worldWidth, worldHeight, 1.0f);


			asteroids = new List<Asteroid>();
			ships = new List<Ship>();
			targets = new List<Tangible>();

			ships.Add(playerShip);
			foreach (Ship ship in ships)
				targets.Add(ship);



			for (int i = 0; i < 10; i++)
				AddAsteroid(new Vector2(gen.Next(100, 4000), gen.Next(100, 2000)));
		}

		/// <summary>
		/// Draws the stars background.
		/// </summary>
		protected void drawWorld() {

			/* Parallax Scrolling BG */
			spriteBatch.Draw(Assets.starfield2,
				new Rectangle((int) (mainCamera.Position.X * .9), (int) (mainCamera.Position.Y * .9), worldWidth / 2, worldHeight / 2),
				null, Color.White, 0f, Vector2.Zero, SpriteEffects.None, 1);
			spriteBatch.Draw(Assets.starfield1,
				new Rectangle((int) (mainCamera.Position.X * 0.7), (int) (mainCamera.Position.Y * 0.7), worldWidth / 4, worldHeight / 4),
				null, Color.White, 0f, Vector2.Zero, SpriteEffects.None, 1);
			spriteBatch.Draw(Assets.starfield1,
				new Rectangle((int) (mainCamera.Position.X * 0.6), (int) (mainCamera.Position.Y * 0.6), worldWidth / 5, worldHeight / 5),
				null, Color.White, 0f, Vector2.Zero, SpriteEffects.None, 1);
			spriteBatch.Draw(Assets.starfield1,
				new Rectangle((int) (mainCamera.Position.X * 0.4), (int) (mainCamera.Position.Y * 0.4), worldWidth / 6, worldHeight / 6),
				null, Color.White, 0f, Vector2.Zero, SpriteEffects.None, 1);
			//spriteBatch.Draw(Assets.starfield3,
			//	new Rectangle((int) (mainCamera.Position.X * .5), (int) (mainCamera.Position.Y * .5f), worldWidth / 10, worldHeight / 10),
			//	null, Color.White, 0f, Vector2.Zero, SpriteEffects.None, 1);
		}

		private void AddAsteroid(Vector2 position) {
			Asteroid asteroid = new Asteroid(Assets.asteroid, position);
			asteroids.Add(asteroid);
			targets.Add(asteroid);
		}


		/// <summary>
		/// Allows the game to run logic such as updating the world,
		/// checking for collisions, gathering input, and playing audio.
		/// 
=======
    class GameplayScreen
    {

        private KeyboardState keyState;
        private MouseState mouseState;
        private SpriteBatch spriteBatch;
        private Ship playerShip;
		private Planet planet;
        private Game1 game;
        //static private bool flashFlag = false;
        //private static System.Timers.Timer invinsibilityTimer;
        //private static System.Timers.Timer flashingTimer;
        List<Projectile> projectiles;
        List<Ship> ships;
        List<Asteroid> asteroids;

        // The rate of fire of the player laser
        TimeSpan fireTime;
        TimeSpan previousFireTime;

        // gives the player temporary invincibility on collision with asteroids 
        TimeSpan damageTime;
        TimeSpan previousDamageTime;

        Camera mainCamera;
        GUI gui;

        private Tools.AssetManager Assets;

        static public int worldWidth = 4000;
        static public int worldHeight = 2000;
        //static protected bool invinsible;
        private int SCREEN_WIDTH;
        private int SCREEN_HEIGHT;


        public GameplayScreen(Game1 game, SpriteBatch batch)
        {
            this.game = game;
            SCREEN_HEIGHT = game.getScreenHeight();
            SCREEN_WIDTH = game.getScreenWidth();

            spriteBatch = batch;

            /*
            invinsibilityTimer = new System.Timers.Timer(2000);
            invinsibilityTimer.Elapsed += OnTimedEvent;
            invinsibilityTimer.Enabled = false;
            flashingTimer = new System.Timers.Timer(50);
            flashingTimer.Elapsed += onTimedEventFlashing;
            flashingTimer.Enabled = false;
            flashFlag = true;
            invinsible = false;
            */
            Random r = new Random();
            Assets = Game1.Assets;
            playerShip = new Ship(Assets.spaceShipTest, new Vector2(200, 200)); //Create new player ship
			planet = new Planet(Assets.waterPlanet, new Vector2(1000, 1000));



			gui = new GUI(game, playerShip, planet);

            Viewport mainViewport = new Viewport((int)playerShip.getX(), (int)playerShip.getY(),
                game.GraphicsDevice.Viewport.Width, game.GraphicsDevice.Viewport.Height - GUI.guiHeight);
            mainCamera = new Camera(mainViewport, worldWidth, worldHeight, 1.0f);

            projectiles = new List<Projectile>();
            asteroids = new List<Asteroid>();
            ships = new List<Ship>();

            // Set the laser to fire every quarter second
            fireTime = TimeSpan.FromSeconds(.15f);
            damageTime = TimeSpan.FromSeconds(3);


            for (int i = 0; i < 10; i++)
            {
                AddAsteroid(new Vector2(r.Next(100, 4000), r.Next(100, 2000)));
            }
        }

        /// <summary>
        /// Draws the stars background.
        /// </summary>
        protected void drawWorld()
        {

            /* Parallax Scrolling BG */
            spriteBatch.Draw(Assets.starfield2,
                new Rectangle((int)(mainCamera.Position.X * .9), (int)(mainCamera.Position.Y * .9), worldWidth / 4, worldHeight / 4),
                null, Color.White, 0f, Vector2.Zero, SpriteEffects.None, 1);
            spriteBatch.Draw(Assets.starfield1,
                new Rectangle((int)(mainCamera.Position.X * 0.7), (int)(mainCamera.Position.Y * 0.7), 1600, 1200),
                null, Color.White, 0f, Vector2.Zero, SpriteEffects.None, 1);
            spriteBatch.Draw(Assets.starfield1,
                new Rectangle((int)(mainCamera.Position.X * 0.6), (int)(mainCamera.Position.Y * 0.6), 2400, 1800),
                null, Color.White, 0f, Vector2.Zero, SpriteEffects.None, 1);
            spriteBatch.Draw(Assets.starfield1,
                new Rectangle((int)(mainCamera.Position.X * 0.4), (int)(mainCamera.Position.Y * 0.4), 800, 600),
                null, Color.White, 0f, Vector2.Zero, SpriteEffects.None, 1);
            spriteBatch.Draw(Assets.starfield3,
                new Rectangle((int)(mainCamera.Position.X * .5), (int)(mainCamera.Position.Y * .5f), worldWidth / 10, worldHeight / 10),
                null, Color.White, 0f, Vector2.Zero, SpriteEffects.None, 1);
        }

        private void AddAsteroid(Vector2 position)
        {
           Random r = new Random();
           Asteroid asteroid = new Asteroid(Assets.asteroid, position);
           asteroids.Add(asteroid);
        }

        private void AddProjectile(Vector2 position)
        {
            Projectile projectile = new Projectile(Assets.laser, playerShip.Position, playerShip);
            projectile.Initialize(game.GraphicsDevice.Viewport, Assets.laser);
            projectiles.Add(projectile);
        }

        /// <summary>
        /// Allows the game to run logic such as updating the world,
        /// checking for collisions, gathering input, and playing audio.
        /// 
>>>>>>> 5f4f8a66fb33687cc714e3124ad587c5fdad8093
		/// Checks player edge wrap around/edge stop.
		/// 
		/// </summary>
		/// <param name="gameTime">Provides a snapshot of timing values.</param>
		public void Update(GameTime gameTime) {

			keyState = Keyboard.GetState(); //Get which keys are pressed or released
			mouseState = Mouse.GetState();



			//Up Key toggles back thruster
			if (keyState.IsKeyDown(Keys.Up) || keyState.IsKeyDown(Keys.W)) {
				playerShip.thrust(gameTime);
			}

			//Left Key rotates ship left
			if (keyState.IsKeyDown(Keys.Left) || keyState.IsKeyDown(Keys.A)) {
				playerShip.rotateLeft(gameTime);
			}

			//Right Key rotates ship right
			if (keyState.IsKeyDown(Keys.Right) || keyState.IsKeyDown(Keys.D)) {
				playerShip.rotateRight(gameTime);
<<<<<<< HEAD
			}

			//Space key activates debugging brake
			if (keyState.IsKeyDown(Keys.Space)) {
				playerShip.stop();
			}

			if (keyState.IsKeyDown(Keys.LeftControl)) {
				playerShip.fire(gameTime);

			}

			if (keyState.IsKeyDown(Keys.LeftShift))
				playerShip.altFire(gameTime);

			foreach (Planet planet in planets)
				planet.update(gameTime, targets);



			mainCamera.setZoom(mouseState.ScrollWheelValue);
			mainCamera.Position = playerShip.Position; // center the camera to player's position
			mainCamera.update(gameTime);

			/* Transform mouse input from view to world position
			 * NOT currently used but may be useful in the future
			Matrix inverse = Matrix.Invert(mainCamera.getTransformation());
			Vector2 mousePos = Vector2.Transform(
			   new Vector2(mouseState.X, mouseState.Y), inverse);
			*/

			if (asteroids.Count < 10)
				AddAsteroid(new Vector2(gen.Next(100, 4000), gen.Next(100, 2000)));


			foreach (Ship ship in ships)
				ship.update(gameTime, targets);
			//gui.update();

			for (int i = asteroids.Count - 1; i >= 0; i--) {
				asteroids[i].update(gameTime, targets);
				if (!asteroids[i].isActive)
					asteroids.RemoveAt(i);
			}

			Game1.explosionEngine.update(gameTime);
		}


		public void draw() {

			/* Main camera sprite batch */
			spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend,
				SamplerState.LinearWrap, null, null, null, mainCamera.getTransformation());


			drawWorld(); //Draws background


			//Draws all space ships
			foreach (Ship ship in ships)
				ship.draw(spriteBatch);

			foreach (Planet planet in planets)
				planet.draw(spriteBatch);


			// Draw the Asteroids
			for (int i = 0; i < asteroids.Count; i++) {
				asteroids[i].draw(spriteBatch);
			}

			Game1.explosionEngine.draw(spriteBatch);

			spriteBatch.End();


			/* GUI spritebatch. Anything drawn here will remain
			 * static and not be affected by cameras. */
			spriteBatch.Begin();

			gui.draw(spriteBatch);


			spriteBatch.End();
		}
	}
=======
            }

            //Space key activates debugging brake
            if (keyState.IsKeyDown(Keys.Space))
            {
                playerShip.stop();
            }


			planet.update(gameTime, playerShip);
			playerShip.update(gameTime);

			

            mainCamera.setZoom(mouseState.ScrollWheelValue);
            mainCamera.Position = playerShip.CenterPosition; // center the camera to player's position
            mainCamera.update(gameTime);

            /* Transform mouse input from view to world position
             * NOT currently used but may be useful in the future*/
            Matrix inverse = Matrix.Invert(mainCamera.getTransformation());
            Vector2 mousePos = Vector2.Transform(
               new Vector2(mouseState.X, mouseState.Y), inverse);

            if (keyState.IsKeyDown(Keys.LeftControl))
            {
                // Fire only every interval we set as the fireTime
                if (gameTime.TotalGameTime - previousFireTime > fireTime)
                {
                    // Reset our current time
                    previousFireTime = gameTime.TotalGameTime;

                    // Add the projectile, but add it to the front and center of the player
                    AddProjectile(playerShip.Position + new Vector2(0, 0));
                }
            }
            if (asteroids.Count < 50)
                AddAsteroid(new Vector2(r.Next(100, 4000), r.Next(100, 2000)));

            UpdateDamageCollision(gameTime);
			playerShip.update(gameTime);
            gui.update(playerShip);
            UpdateProjectiles();
            UpdateAsteroids();
            
        }

        private void UpdateDamageCollision(GameTime gameTime)
        {
            foreach (Asteroid a in asteroids)
            {
                if (playerShip.getShipHitBox().getArray().Intersects(a.hitbox.getArray()) 
                    && (gameTime.TotalGameTime - previousDamageTime > damageTime))
                {
                    // Reset our current time
                    previousDamageTime = gameTime.TotalGameTime;
                    playerShip.setHealth(a.Damage);
                }
            }
            // Use the Rectangle's built-in intersect function to 
            // determine if two objects are overlapping
            foreach(Projectile p in projectiles){
                if (p.getProjectileHitBox().getArray().Intersects(playerShip.getShipHitBox().getArray())) {
                   // playerShip.setHealth(-1);
                }
                foreach (Asteroid a in asteroids) {
                    if (p.getProjectileHitBox().getArray().Intersects(a.hitbox.getArray()))
                    {
                        a.Health -= p.Damage;
                        if (a.Health <= 0)
                        {
                            a.Active = false;
                        }
                        p.setActive(false);
                    }
                }
            }

            //Assets = Game1.Assets;
            // Only create the rectangle once for the player
            //rectangle1 = new Rectangle((int)(playerShip.Position.X ),
            //(int)(playerShip.Position.Y),
            //(int)(Assets.spaceShipTest.Width * playerShip.getScale()),
            //(int)(Assets.spaceShipTest.Height * playerShip.getScale()));

            /*
                // Determine if the two objects collided with each
                // other
                if (rectangle1.Intersects(rectangle2) && invinsible == false)
                {
                    invinsible = true;
                    invinsibilityTimer.Enabled = true;
                    playerShip.setHealth(playerShip.getHealth() - 1);
                    flashingTimer.Enabled = true;
                }
                if (invinsible == false)
                {
                    invinsibilityTimer.Enabled = false;
                    flashingTimer.Enabled = false;
                }
                if (playerShip.getHealth() == 0)
                {
                    playerShip.setHealth(100);
                    game.EndMatch();
                    invinsibilityTimer.Enabled = false;
                }
            */


        }

        //Comment
        private void UpdateProjectiles()
        {
            // Update the Projectiles
            for (int i = projectiles.Count - 1; i >= 0; i--)
            {
                projectiles[i].Update();

                if (projectiles[i].getActive() == false)
                {
                    projectiles.RemoveAt(i);
                }
            }
        }

        private void UpdateAsteroids()
        {
            // Update the Projectiles
            for (int i = asteroids.Count - 1; i >= 0; i--)
            {
                if (asteroids[i].Active == false)
                {
                    asteroids.RemoveAt(i);
                }
            }
        }

        public void draw()
        {

            /* Main camera sprite batch */
            spriteBatch.Begin(SpriteSortMode.BackToFront, BlendState.AlphaBlend,
                SamplerState.LinearWrap, null, null, null, mainCamera.getTransformation());


            drawWorld(); //Draws background

            playerShip.draw(spriteBatch); //Draws player space ship
			planet.draw(spriteBatch);
            // Draw the Projectiles
            for (int i = 0; i < projectiles.Count; i++)
            {
                spriteBatch.Draw(Assets.shuttle, projectiles[i].getProjectileHitBox().getArray(), Color.Red);
                //projectiles[i].draw(spriteBatch); //This is a debug statement to view where the hitboxes are
                
            }
            // Draw the Asteroids
            for (int i = 0; i < asteroids.Count; i++)
            {
                asteroids[i].draw(spriteBatch);     
            }


            spriteBatch.End();




            /* GUI spritebatch. Anything drawn here will remain
             * static and not be affected by cameras. */
            spriteBatch.Begin();

            gui.draw(spriteBatch);


            spriteBatch.End();
        }
        /*
        private static void OnTimedEvent(Object source, ElapsedEventArgs e)
        {
            invinsible = false;
        }
        private static void onTimedEventFlashing(Object source, ElapsedEventArgs e)
        {
            if (flashFlag == true)
            {
                playerShip.setAlpha(0);
                flashFlag = false;
            }
            if (flashFlag == false)
            {
                playerShip.setAlpha(255);
                flashFlag = true;
            }
        }
        */
    }
>>>>>>> 5f4f8a66fb33687cc714e3124ad587c5fdad8093
}
